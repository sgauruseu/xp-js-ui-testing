import com.enonic.uitest.server.ServerInstance

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }

    dependencies {
        classpath 'com.moowork.gradle:gradle-gulp-plugin:0.13'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
    }
}
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.gulp'
apply plugin: 'java'


configurations {
    distro
}

ext {
    xpVersion = '6.12.0-SNAPSHOT'
    unpackDir = "$buildDir${File.separator}install"
    screenshotsDir = "$buildDir${File.separator}screenshots"
    reportsDir = "$buildDir${File.separator}repots"
    distroDir = "$unpackDir${File.separator}enonic-xp-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
    xpHome = "$distroDir${File.separator}home"
}


dependencies {
    compile 'org.seleniumhq.selenium:selenium-java:3.0.1'
    compile 'com.google.guava:guava:18.0'
    compile "com.enonic.xp:core-api:$xpVersion"
    compile 'log4j:log4j:1.2.17'
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    compile 'org.spockframework:spock-core:1.0-groovy-2.4'
    compile 'org.gebish:geb-spock:0.13.1'
    distro "com.enonic.xp:distro:$xpVersion@zip"
}

task copyContentTypes( type: Copy ) {
    from '../test-applications/contenttypes/build/libs/'
    from '../test-applications/simple-page/build/libs/'
    from '../test-applications/myfirstapp/build/libs/'
    from '../test-applications/first-application/build/libs/'
    include '**/*.jar'
    into file( deployDir )
}

task copyTestApplications( type: Copy ) {
    from '../test-applications/first-application/build/libs/'
    from '../test-applications/second-application/build/libs/'
    from '../test-applications/third-application/build/libs/'
    from '../test-applications/fourth-application/build/libs/'
    from '../test-applications/test-application/build/libs/'
    include '**/*.jar'
    into file( deployDir )
}


task deleteFolders( type: Delete ) {
    delete unpackDir, screenshotsDir, reportsDir
}
task buildApplications(
    dependsOn: [':test-applications:first-application:install', ':test-applications:simple-page:install', ':test-applications:contenttypes:install',
                ':test-applications:second-application:install', ':test-applications:third-application:install', ':test-applications:fourth-application:install', ':test-applications:test-application:install', ':test-applications:myfirstapp:install'] )

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

ext {
    xpServer = new ServerInstance()
}

task startServer( dependsOn: unpackDistro ) {
    doLast {
        // logging.captureStandardOutput LogLevel.INFO
        // ext.xpServer = new ServerInstance()
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 40000
        xpServer.start()
    }
}

task stopServer << {
    xpServer.stop()
}

tasks.withType( Test ) {
    jvmArgs '-Xms128m', '-Xmx1024m'
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        displayGranularity = 0
    }
}
//run the tusk in the gulpfile.js. Name of the task is 'test'
task gulpTest( type: GulpTask, dependsOn: [npmInstall, startServer] ) {
    inputs.files fileTree( dir: '.' )
    outputs.files fileTree( dir: '/test-results' )
    args = ['test']
    startServer.mustRunAfter npmInstall

}
//tasks.withType(Test)*.finalizedBy allureReport
gulpTest.finalizedBy = ['stopServer']

